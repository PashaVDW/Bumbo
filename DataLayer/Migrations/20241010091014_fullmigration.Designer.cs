// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bumbo.Data;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(BumboDBContext))]
<<<<<<<< HEAD:DataLayer/Migrations/20241016132554_FirstCreate.Designer.cs
    [Migration("20241016132554_FirstCreate")]
    partial class FirstCreate
========
    [Migration("20241010091014_fullmigration")]
    partial class fullmigration
>>>>>>>> development:DataLayer/Migrations/20241010091014_fullmigration.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("bumbo.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BranchId");

                    b.HasIndex("CountryName");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            CountryName = "Netherlands",
                            HouseNumber = "10",
                            Name = "Amsterdam Branch",
                            PostalCode = "12345",
                            Street = "Damrak"
                        },
                        new
                        {
                            BranchId = 2,
                            CountryName = "Belgium",
                            HouseNumber = "20",
                            Name = "Brussels Branch",
                            PostalCode = "67890",
                            Street = "Grand Place"
                        });
                });

            modelBuilder.Entity("bumbo.Models.Country", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Name = "Netherlands"
                        },
                        new
                        {
                            Name = "Belgium"
                        },
                        new
                        {
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("bumbo.Models.Days", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Name");

                    b.ToTable("Days");

                    b.HasData(
                        new
                        {
                            Name = "Monday"
                        },
                        new
                        {
                            Name = "Tuesday"
                        },
                        new
                        {
                            Name = "Wednesday"
                        },
                        new
                        {
                            Name = "Thursday"
                        },
                        new
                        {
                            Name = "Friday"
                        },
                        new
                        {
                            Name = "Saturday"
                        },
                        new
                        {
                            Name = "Sunday"
                        });
                });

            modelBuilder.Entity("bumbo.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsSystemManager")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ManagerOfBranchId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerOfBranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BID = "B001",
                            BirthDate = new DateTime(1985, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241016132554_FirstCreate.Designer.cs
                            ConcurrencyStamp = "9a06164c-7311-4625-bf1f-1df67e783cee",
========
                            ConcurrencyStamp = "b4640636-837a-4c75-b856-f9e67cd34c93",
>>>>>>>> development:DataLayer/Migrations/20241010091014_fullmigration.Designer.cs
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            FunctionName = "Manager",
                            HouseNumber = 10,
                            IsSystemManager = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 1,
                            MiddleName = "A.",
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE@EXAMPLE.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241016132554_FirstCreate.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEFGtD5zymh655w3bAHIPs8i9csqvgngsXkTdHt7xJl0VpMs44xd0X6DqzPUj01ZY1A==",
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            SecurityStamp = "71843d89-5b71-424e-bfc3-24d14f52496f",
========
                            PasswordHash = "hashedpassword123",
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            SecurityStamp = "2ac06510-440d-43ca-9491-289aef99f2f2",
>>>>>>>> development:DataLayer/Migrations/20241010091014_fullmigration.Designer.cs
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BID = "B002",
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241016132554_FirstCreate.Designer.cs
                            ConcurrencyStamp = "092b2c77-f5d4-44ca-8350-ba9e6e4ca1c9",
========
                            ConcurrencyStamp = "1beecca1-b991-409c-b2af-27dcc6611a14",
>>>>>>>> development:DataLayer/Migrations/20241010091014_fullmigration.Designer.cs
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            FunctionName = "Cashier",
                            HouseNumber = 22,
                            IsSystemManager = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MiddleName = "B.",
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE.SMITH@EXAMPLE.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241016132554_FirstCreate.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEA/Cnynl3DpCsbs7fGApcVzwjycITV8LQor7V+s80bkppBQ+UiOX3ZDJ9XkwLwbhPg==",
                            PhoneNumberConfirmed = false,
                            PostalCode = "54321",
                            SecurityStamp = "8a073d6c-c3a5-4d63-b715-4a82ba5c7a75",
========
                            PasswordHash = "hashedpassword456",
                            PhoneNumberConfirmed = false,
                            PostalCode = "54321",
                            SecurityStamp = "c3a715f6-86dc-41df-b13a-ef5d49c52328",
>>>>>>>> development:DataLayer/Migrations/20241010091014_fullmigration.Designer.cs
                            StartDate = new DateTime(2012, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "jane.smith@example.com"
                        });
                });

            modelBuilder.Entity("bumbo.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Branch_branchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Branch_branchId");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Branch_branchId = 1,
                            Name = "Basic Package"
                        },
                        new
                        {
                            Id = 2,
                            Branch_branchId = 1,
                            Name = "Standard Package"
                        },
                        new
                        {
                            Id = 3,
                            Branch_branchId = 2,
                            Name = "Premium Package"
                        },
                        new
                        {
                            Id = 4,
                            Branch_branchId = 2,
                            Name = "Family Package"
                        },
                        new
                        {
                            Id = 5,
                            Branch_branchId = 1,
                            Name = "Weekly Special"
                        });
                });

            modelBuilder.Entity("bumbo.Models.TemplateHasDays", b =>
                {
                    b.Property<int>("Templates_id")
                        .HasColumnType("int");

                    b.Property<string>("Days_name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ContainerAmount")
                        .HasColumnType("int");

                    b.Property<int>("CustomerAmount")
                        .HasColumnType("int");

                    b.HasKey("Templates_id", "Days_name");

                    b.HasIndex("Days_name");

                    b.ToTable("TemplateHasDays");

                    b.HasData(
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Monday",
                            ContainerAmount = 41,
                            CustomerAmount = 989
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Tuesday",
                            ContainerAmount = 52,
                            CustomerAmount = 825
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Wednesday",
                            ContainerAmount = 38,
                            CustomerAmount = 902
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Thursday",
                            ContainerAmount = 52,
                            CustomerAmount = 990
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Friday",
                            ContainerAmount = 39,
                            CustomerAmount = 1040
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Saturday",
                            ContainerAmount = 43,
                            CustomerAmount = 953
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Sunday",
                            ContainerAmount = 32,
                            CustomerAmount = 872
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Monday",
                            ContainerAmount = 42,
                            CustomerAmount = 916
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Tuesday",
                            ContainerAmount = 38,
                            CustomerAmount = 912
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Wednesday",
                            ContainerAmount = 32,
                            CustomerAmount = 902
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Thursday",
                            ContainerAmount = 45,
                            CustomerAmount = 940
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Friday",
                            ContainerAmount = 47,
                            CustomerAmount = 816
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Saturday",
                            ContainerAmount = 38,
                            CustomerAmount = 842
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Sunday",
                            ContainerAmount = 45,
                            CustomerAmount = 885
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Monday",
                            ContainerAmount = 53,
                            CustomerAmount = 872
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Tuesday",
                            ContainerAmount = 41,
                            CustomerAmount = 989
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Wednesday",
                            ContainerAmount = 42,
                            CustomerAmount = 916
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Thursday",
                            ContainerAmount = 36,
                            CustomerAmount = 875
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Friday",
                            ContainerAmount = 29,
                            CustomerAmount = 877
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Saturday",
                            ContainerAmount = 53,
                            CustomerAmount = 945
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Sunday",
                            ContainerAmount = 52,
                            CustomerAmount = 880
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Monday",
                            ContainerAmount = 49,
                            CustomerAmount = 900
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Tuesday",
                            ContainerAmount = 38,
                            CustomerAmount = 903
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Wednesday",
                            ContainerAmount = 45,
                            CustomerAmount = 930
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Thursday",
                            ContainerAmount = 42,
                            CustomerAmount = 985
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Friday",
                            ContainerAmount = 36,
                            CustomerAmount = 865
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Saturday",
                            ContainerAmount = 43,
                            CustomerAmount = 950
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Sunday",
                            ContainerAmount = 38,
                            CustomerAmount = 950
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Monday",
                            ContainerAmount = 52,
                            CustomerAmount = 832
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Tuesday",
                            ContainerAmount = 49,
                            CustomerAmount = 935
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Wednesday",
                            ContainerAmount = 29,
                            CustomerAmount = 877
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Thursday",
                            ContainerAmount = 41,
                            CustomerAmount = 989
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Friday",
                            ContainerAmount = 32,
                            CustomerAmount = 872
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Saturday",
                            ContainerAmount = 36,
                            CustomerAmount = 771
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Sunday",
                            ContainerAmount = 52,
                            CustomerAmount = 885
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("bumbo.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("bumbo.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("bumbo.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bumbo.Models.Branch", b =>
                {
                    b.HasOne("bumbo.Models.Country", "Country")
                        .WithMany("Branches")
                        .HasForeignKey("CountryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("bumbo.Models.Employee", b =>
                {
                    b.HasOne("bumbo.Models.Branch", "ManagerOfBranch")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerOfBranchId");

                    b.Navigation("ManagerOfBranch");
                });

            modelBuilder.Entity("bumbo.Models.Template", b =>
                {
                    b.HasOne("bumbo.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("Branch_branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("bumbo.Models.TemplateHasDays", b =>
                {
                    b.HasOne("bumbo.Models.Days", "Days")
                        .WithMany("TemplateHasDays")
                        .HasForeignKey("Days_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Template", "Template")
                        .WithMany("TemplateHasDays")
                        .HasForeignKey("Templates_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Days");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("bumbo.Models.Branch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("bumbo.Models.Country", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("bumbo.Models.Days", b =>
                {
                    b.Navigation("TemplateHasDays");
                });

            modelBuilder.Entity("bumbo.Models.Template", b =>
                {
                    b.Navigation("TemplateHasDays");
                });
#pragma warning restore 612, 618
        }
    }
}
