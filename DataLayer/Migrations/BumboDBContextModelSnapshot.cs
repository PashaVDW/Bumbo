// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bumbo.Data;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(BumboDBContext))]
    partial class BumboDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrognosisId")
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BranchId");

                    b.HasIndex("CountryName");

                    b.HasIndex("PrognosisId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            CountryName = "Netherlands",
                            HouseNumber = "10",
                            Name = "Amsterdam Filiaal",
                            PostalCode = "1012 LG",
                            Street = "Damrak"
                        },
                        new
                        {
                            BranchId = 2,
                            CountryName = "Belgium",
                            HouseNumber = "20",
                            Name = "Brussels Filiaal",
                            PostalCode = "1000",
                            Street = "Grote Markt"
                        },
                        new
                        {
                            BranchId = 3,
                            CountryName = "Netherlands",
                            HouseNumber = "2",
                            Name = "Alkmaar Filiaal",
                            PostalCode = "1811 KH",
                            Street = "Paardenmarkt"
                        },
                        new
                        {
                            BranchId = 4,
                            CountryName = "Netherlands",
                            HouseNumber = "15",
                            Name = "Rotterdam Filiaal",
                            PostalCode = "3011 HE",
                            Street = "Botersloot"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Department", b =>
                {
                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentName");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentName = "Coli uitladen"
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen"
                        },
                        new
                        {
                            DepartmentName = "Kassa"
                        },
                        new
                        {
                            DepartmentName = "Vers"
                        },
                        new
                        {
                            DepartmentName = "Spiegelen "
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Function", b =>
                {
                    b.Property<string>("FunctionName")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("FunctionName");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            FunctionName = "Cashier"
                        },
                        new
                        {
                            FunctionName = "Stocker"
                        },
                        new
                        {
                            FunctionName = "Manager"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Prognosis_has_days_has_Department", b =>
                {
                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Days_name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PrognosisId")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("AmountWorkersNeeded")
                        .HasColumnType("int");

                    b.Property<int>("HoursWorkNeeded")
                        .HasColumnType("int");

                    b.HasKey("DepartmentName", "Days_name", "PrognosisId");

                    b.HasIndex("Days_name");

                    b.HasIndex("PrognosisId");

                    b.ToTable("prognosis_Has_Days_Has_Departments");

                    b.HasData(
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 24
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 28
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 32
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 16
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 20
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 25
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 30
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 35
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 18
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 22
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 26
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 29
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 34
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 17
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 21
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 24
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 27
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 31
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 15
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 19
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 28
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 32
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 6,
                            HoursWorkNeeded = 36
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 20
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 24
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 30
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 35
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 6,
                            HoursWorkNeeded = 38
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 22
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 26
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 27
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 30
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 34
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 18
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 22
                        });
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsSystemManager")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ManagerOfBranchId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerOfBranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f7g7h8i9-01j2-3c45-g6h7-i8j9k0l1m2n3",
                            AccessFailedCount = 0,
                            BID = "B001",
                            BirthDate = new DateTime(1985, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "865a2d58-7a87-49bf-8fef-cd2cfe9c6b6b",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            HouseNumber = 10,
                            IsSystemManager = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 1,
                            MiddleName = "A.",
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJhp+fNzAjMRLGaLwWV/uJwWd+kGUUgxAVdm0rcmiK2JCdl0Lvi6bcv6Dvw8OMLM7Q==",
                            PhoneNumber = "06-9876543",
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            SecurityStamp = "3f6bed86-dccc-40fe-928f-7700917a1f26",
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com"
                        },
                        new
                        {
                            Id = "e6f6g7h8-90i1-2b34-f5g6-h7i8j9k0l1m2",
                            AccessFailedCount = 0,
                            BID = "B002",
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fa0605df-16d9-4acb-9488-a7c7d9e0652a",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            HouseNumber = 22,
                            IsSystemManager = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MiddleName = "B.",
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK21WoG6S+ps1a5O7xNTn1ZG0PGCe1hIZKdLe/TtNtTkLLJmqInGobOYP9dZ1LkYkg==",
                            PhoneNumber = "06-12345678",
                            PhoneNumberConfirmed = false,
                            PostalCode = "9271 GB",
                            SecurityStamp = "23eca850-77af-4688-9edf-27fdd2370854",
                            StartDate = new DateTime(2012, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "jane.smith@example.com"
                        },
                        new
                        {
                            Id = "a2b2d3e4-56f7-8a90-b1c2-d3e4f5g6h7i8",
                            AccessFailedCount = 0,
                            BID = "B003",
                            BirthDate = new DateTime(1992, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "babff6c7-d41f-42ef-94af-0806d21bbc63",
                            Email = "darlon.vandijk@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Darlon",
                            HouseNumber = 5,
                            IsSystemManager = false,
                            LastName = "van Dijk",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "DARLON.VANDIJK@HOTMAIL.COM",
                            NormalizedUserName = "DARLON.VANDIJK@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI6DakDRncVQRwq4wYamWwe3V/gtNCjh0LDwcLAjk1IYpA7NuPlf4Wmtjl2H37oTKw==",
                            PhoneNumber = "+31 6 34567890",
                            PhoneNumberConfirmed = false,
                            PostalCode = "8329 SK",
                            SecurityStamp = "f5124d6f-e93b-4677-9e82-2d0a13c1eb5b",
                            StartDate = new DateTime(2018, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "darlon.vandijk@hotmail.com"
                        },
                        new
                        {
                            Id = "b3c3d4e5-67f8-9a01-c2d3-e4f5g6h7i8j9",
                            AccessFailedCount = 0,
                            BID = "B004",
                            BirthDate = new DateTime(1980, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "89184675-fa6c-4de3-927b-0fd7ad93b876",
                            Email = "pasha.bakker@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pasha",
                            HouseNumber = 15,
                            IsSystemManager = false,
                            LastName = "Bakker",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 3,
                            MiddleName = "",
                            NormalizedEmail = "PASHA.BAKKER@GMAIL.COM",
                            NormalizedUserName = "PASHA.BAKKER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECuoT1WluNs9xySamI4+97FGQdQFBW92hdhYOHWthNLF28/i9+xQOUizYzCZSPL+7Q==",
                            PhoneNumber = "+31 6 45678901",
                            PhoneNumberConfirmed = false,
                            PostalCode = "3894 HT",
                            SecurityStamp = "09a8c44d-6b9f-4605-8281-ab9b5208df10",
                            StartDate = new DateTime(2010, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "pasha.bakker@gmail.com"
                        },
                        new
                        {
                            Id = "c4d4e5f6-78g9-0a12-d3e4-f5g6h7i8j9k0",
                            AccessFailedCount = 0,
                            BID = "B005",
                            BirthDate = new DateTime(1988, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ece525cf-a36e-404f-a7ac-de7ab2c19173",
                            Email = "sarah.vanderven@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sarah",
                            HouseNumber = 8,
                            IsSystemManager = false,
                            LastName = "van der Ven",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "SARAH.VANDERVEN@HOTMAIL.COM",
                            NormalizedUserName = "SARAH.VANDERVEN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO57SrMw49e+0MacXDfKmJJeGzawSvM1Tmi6pCaA0/xKDR+vO+EpmAlxYZaDiG+qyw==",
                            PhoneNumber = "+31 6 56789012",
                            PhoneNumberConfirmed = false,
                            PostalCode = "2933 KJ",
                            SecurityStamp = "e65b2443-0b26-4fae-8e5e-c41d722fcf8e",
                            StartDate = new DateTime(2017, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "sarah.vanderven@hotmail.com"
                        },
                        new
                        {
                            Id = "d5e5f6g7-89h0-1a23-e4f5-g6h7i8j9k0l1",
                            AccessFailedCount = 0,
                            BID = "B006",
                            BirthDate = new DateTime(1995, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b02473c6-1657-46cd-8144-45206b452e0e",
                            Email = "david.denboer@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "David",
                            HouseNumber = 30,
                            IsSystemManager = false,
                            LastName = "den Boer",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 2,
                            MiddleName = "",
                            NormalizedEmail = "DAVID.DENBOER@GMAIL.COM",
                            NormalizedUserName = "DAVID.DENBOER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIa7XP8+ixxaoQql8SpGMDyn4M55ncf+Zh38x6cyuHDIHfBhEcdr6ZSze+v6/g+mcA==",
                            PhoneNumber = "+31 6 67890123",
                            PhoneNumberConfirmed = false,
                            PostalCode = "4293 BF",
                            SecurityStamp = "5fb428fd-a83f-4d5f-a740-9f6eeae2635a",
                            StartDate = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "david.denboer@gmail.com"
                        },
                        new
                        {
                            Id = "a1b1c1d1-1111-2222-3333-4444abcdabcd",
                            AccessFailedCount = 0,
                            BID = "B012",
                            BirthDate = new DateTime(1993, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b68fb468-7322-422c-8d8f-729fd510b264",
                            Email = "anthony.ross@example.com",
                            EmailConfirmed = true,
                            FirstName = "Anthony",
                            HouseNumber = 7,
                            IsSystemManager = false,
                            LastName = "Ross",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 1,
                            MiddleName = "",
                            NormalizedEmail = "ANTHONY.ROSS@EXAMPLE.COM",
                            NormalizedUserName = "ANTHONY.ROSS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDHUJXELz9nU5Vpx9AvIFZmARxs+CruVSS9U06BP39gXIHpdNNEzBivHYXhEcltn3w==",
                            PhoneNumber = "+31 6 12345678",
                            PhoneNumberConfirmed = false,
                            PostalCode = "2234 AB",
                            SecurityStamp = "59de4a1b-47f0-47aa-8250-0db4310d725b",
                            StartDate = new DateTime(2024, 11, 14, 20, 7, 28, 106, DateTimeKind.Local).AddTicks(9435),
                            TwoFactorEnabled = false,
                            UserName = "anthony.ross@example.com"
                        },
                        new
                        {
                            Id = "b2c2d2e2-2222-3333-4444-5555abcdefab",
                            AccessFailedCount = 0,
                            BID = "B013",
                            BirthDate = new DateTime(1987, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0609116a-162f-45cc-8887-a5ee19237abc",
                            Email = "douwe.jansen@example.com",
                            EmailConfirmed = true,
                            FirstName = "Douwe",
                            HouseNumber = 12,
                            IsSystemManager = false,
                            LastName = "Jansen",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 2,
                            MiddleName = "",
                            NormalizedEmail = "DOUWE.JANSEN@EXAMPLE.COM",
                            NormalizedUserName = "DOUWE.JANSEN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMHQuVx1OVTB5ciLpTwcR5ZvUhrdsgjr/vxAW6NOBK91bN+9R//w8YEfNqiK0CuPBQ==",
                            PhoneNumber = "+31 6 87654321",
                            PhoneNumberConfirmed = false,
                            PostalCode = "3345 CD",
                            SecurityStamp = "0a9d54c7-5a31-4e7c-b2df-267557408e69",
                            StartDate = new DateTime(2024, 11, 14, 20, 7, 28, 172, DateTimeKind.Local).AddTicks(6931),
                            TwoFactorEnabled = false,
                            UserName = "douwe.jansen@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("bumbo.Models.BranchHasEmployee", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FunctionName")
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BranchId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FunctionName");

                    b.ToTable("BranchHasEmployees");

                    b.HasData(
                        new
                        {
                            BranchId = 2,
                            EmployeeId = "d5e5f6g7-89h0-1a23-e4f5-g6h7i8j9k0l1",
                            FunctionName = "Manager",
                            StartDate = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BranchId = 3,
                            EmployeeId = "b3c3d4e5-67f8-9a01-c2d3-e4f5g6h7i8j9",
                            FunctionName = "Manager",
                            StartDate = new DateTime(2010, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BranchId = 4,
                            EmployeeId = "a2b2d3e4-56f7-8a90-b1c2-d3e4f5g6h7i8",
                            FunctionName = "Stocker",
                            StartDate = new DateTime(2018, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BranchId = 3,
                            EmployeeId = "c4d4e5f6-78g9-0a12-d3e4-f5g6h7i8j9k0",
                            FunctionName = "Cashier",
                            StartDate = new DateTime(2017, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BranchId = 1,
                            EmployeeId = "a1b1c1d1-1111-2222-3333-4444abcdabcd",
                            FunctionName = "Cashier",
                            StartDate = new DateTime(2024, 11, 14, 20, 7, 28, 106, DateTimeKind.Local).AddTicks(9435)
                        },
                        new
                        {
                            BranchId = 2,
                            EmployeeId = "b2c2d2e2-2222-3333-4444-5555abcdefab",
                            FunctionName = "Stocker",
                            StartDate = new DateTime(2024, 11, 14, 20, 7, 28, 172, DateTimeKind.Local).AddTicks(6931)
                        });
                });

            modelBuilder.Entity("bumbo.Models.Country", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Name = "Netherlands"
                        },
                        new
                        {
                            Name = "Belgium"
                        },
                        new
                        {
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("bumbo.Models.Days", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Name");

                    b.ToTable("Days");

                    b.HasData(
                        new
                        {
                            Name = "Maandag"
                        },
                        new
                        {
                            Name = "Dinsdag"
                        },
                        new
                        {
                            Name = "Woensdag"
                        },
                        new
                        {
                            Name = "Donderdag"
                        },
                        new
                        {
                            Name = "Vrijdag"
                        },
                        new
                        {
                            Name = "Zaterdag"
                        },
                        new
                        {
                            Name = "Zondag"
                        },
                        new
                        {
                            Name = "Monday"
                        },
                        new
                        {
                            Name = "Tuesday"
                        },
                        new
                        {
                            Name = "Wednesday"
                        },
                        new
                        {
                            Name = "Thursday"
                        },
                        new
                        {
                            Name = "Friday"
                        },
                        new
                        {
                            Name = "Saturday"
                        },
                        new
                        {
                            Name = "Sunday"
                        });
                });

            modelBuilder.Entity("bumbo.Models.Norm", b =>
                {
                    b.Property<int>("normId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("normId"));

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("branchId")
                        .HasColumnType("int");

                    b.Property<int>("normInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("week")
                        .HasColumnType("int");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("normId");

                    b.HasIndex("branchId", "year", "week", "activity")
                        .IsUnique();

                    b.ToTable("Norms");

                    b.HasData(
                        new
                        {
                            normId = 1,
                            activity = "Coli uitladen",
                            branchId = 1,
                            normInSeconds = 90,
                            week = 41,
                            year = 2024
                        },
                        new
                        {
                            normId = 2,
                            activity = "Vakkenvullen",
                            branchId = 1,
                            normInSeconds = 33,
                            week = 41,
                            year = 2024
                        },
                        new
                        {
                            normId = 3,
                            activity = "Kassa",
                            branchId = 1,
                            normInSeconds = 3,
                            week = 41,
                            year = 2024
                        },
                        new
                        {
                            normId = 4,
                            activity = "Vers",
                            branchId = 1,
                            normInSeconds = 7,
                            week = 41,
                            year = 2024
                        },
                        new
                        {
                            normId = 5,
                            activity = "Spiegelen",
                            branchId = 1,
                            normInSeconds = 2,
                            week = 41,
                            year = 2024
                        });
                });

            modelBuilder.Entity("bumbo.Models.Prognosis", b =>
                {
                    b.Property<string>("PrognosisId")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("WeekNr")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("PrognosisId");

                    b.HasIndex("BranchId");

                    b.ToTable("Prognoses");

                    b.HasData(
                        new
                        {
                            PrognosisId = "1",
                            BranchId = 1,
                            WeekNr = 40,
                            Year = 2024
                        },
                        new
                        {
                            PrognosisId = "2",
                            BranchId = 1,
                            WeekNr = 20,
                            Year = 2024
                        });
                });

            modelBuilder.Entity("bumbo.Models.Prognosis_has_days", b =>
                {
                    b.Property<string>("Days_name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PrognosisId")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("CustomerAmount")
                        .HasColumnType("int");

                    b.Property<int>("PackagesAmount")
                        .HasColumnType("int");

                    b.HasKey("Days_name", "PrognosisId");

                    b.HasIndex("PrognosisId");

                    b.ToTable("Prognosis_Has_Days");

                    b.HasData(
                        new
                        {
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            CustomerAmount = 100,
                            PackagesAmount = 50
                        },
                        new
                        {
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            CustomerAmount = 120,
                            PackagesAmount = 60
                        },
                        new
                        {
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            CustomerAmount = 130,
                            PackagesAmount = 55
                        },
                        new
                        {
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            CustomerAmount = 110,
                            PackagesAmount = 45
                        },
                        new
                        {
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            CustomerAmount = 150,
                            PackagesAmount = 70
                        },
                        new
                        {
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            CustomerAmount = 160,
                            PackagesAmount = 80
                        },
                        new
                        {
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            CustomerAmount = 140,
                            PackagesAmount = 65
                        },
                        new
                        {
                            Days_name = "Maandag",
                            PrognosisId = "2",
                            CustomerAmount = 90,
                            PackagesAmount = 40
                        },
                        new
                        {
                            Days_name = "Dinsdag",
                            PrognosisId = "2",
                            CustomerAmount = 115,
                            PackagesAmount = 55
                        },
                        new
                        {
                            Days_name = "Woensdag",
                            PrognosisId = "2",
                            CustomerAmount = 125,
                            PackagesAmount = 50
                        },
                        new
                        {
                            Days_name = "Donderdag",
                            PrognosisId = "2",
                            CustomerAmount = 105,
                            PackagesAmount = 42
                        },
                        new
                        {
                            Days_name = "Vrijdag",
                            PrognosisId = "2",
                            CustomerAmount = 140,
                            PackagesAmount = 68
                        },
                        new
                        {
                            Days_name = "Zaterdag",
                            PrognosisId = "2",
                            CustomerAmount = 150,
                            PackagesAmount = 75
                        },
                        new
                        {
                            Days_name = "Zondag",
                            PrognosisId = "2",
                            CustomerAmount = 130,
                            PackagesAmount = 60
                        });
                });

            modelBuilder.Entity("bumbo.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Branch_branchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Branch_branchId");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Branch_branchId = 1,
                            Name = "Basic Package"
                        },
                        new
                        {
                            Id = 2,
                            Branch_branchId = 1,
                            Name = "Standard Package"
                        },
                        new
                        {
                            Id = 3,
                            Branch_branchId = 2,
                            Name = "Premium Package"
                        },
                        new
                        {
                            Id = 4,
                            Branch_branchId = 2,
                            Name = "Family Package"
                        },
                        new
                        {
                            Id = 5,
                            Branch_branchId = 1,
                            Name = "Weekly Special"
                        });
                });

            modelBuilder.Entity("bumbo.Models.TemplateHasDays", b =>
                {
                    b.Property<int>("Templates_id")
                        .HasColumnType("int");

                    b.Property<string>("Days_name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ContainerAmount")
                        .HasColumnType("int");

                    b.Property<int>("CustomerAmount")
                        .HasColumnType("int");

                    b.HasKey("Templates_id", "Days_name");

                    b.HasIndex("Days_name");

                    b.ToTable("TemplateHasDays");

                    b.HasData(
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Monday",
                            ContainerAmount = 41,
                            CustomerAmount = 989
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Tuesday",
                            ContainerAmount = 52,
                            CustomerAmount = 825
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Wednesday",
                            ContainerAmount = 38,
                            CustomerAmount = 902
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Thursday",
                            ContainerAmount = 52,
                            CustomerAmount = 990
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Friday",
                            ContainerAmount = 39,
                            CustomerAmount = 1040
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Saturday",
                            ContainerAmount = 43,
                            CustomerAmount = 953
                        },
                        new
                        {
                            Templates_id = 1,
                            Days_name = "Sunday",
                            ContainerAmount = 32,
                            CustomerAmount = 872
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Monday",
                            ContainerAmount = 42,
                            CustomerAmount = 916
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Tuesday",
                            ContainerAmount = 38,
                            CustomerAmount = 912
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Wednesday",
                            ContainerAmount = 32,
                            CustomerAmount = 902
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Thursday",
                            ContainerAmount = 45,
                            CustomerAmount = 940
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Friday",
                            ContainerAmount = 47,
                            CustomerAmount = 816
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Saturday",
                            ContainerAmount = 38,
                            CustomerAmount = 842
                        },
                        new
                        {
                            Templates_id = 2,
                            Days_name = "Sunday",
                            ContainerAmount = 45,
                            CustomerAmount = 885
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Monday",
                            ContainerAmount = 53,
                            CustomerAmount = 872
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Tuesday",
                            ContainerAmount = 41,
                            CustomerAmount = 989
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Wednesday",
                            ContainerAmount = 42,
                            CustomerAmount = 916
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Thursday",
                            ContainerAmount = 36,
                            CustomerAmount = 875
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Friday",
                            ContainerAmount = 29,
                            CustomerAmount = 877
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Saturday",
                            ContainerAmount = 53,
                            CustomerAmount = 945
                        },
                        new
                        {
                            Templates_id = 3,
                            Days_name = "Sunday",
                            ContainerAmount = 52,
                            CustomerAmount = 880
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Monday",
                            ContainerAmount = 49,
                            CustomerAmount = 900
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Tuesday",
                            ContainerAmount = 38,
                            CustomerAmount = 903
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Wednesday",
                            ContainerAmount = 45,
                            CustomerAmount = 930
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Thursday",
                            ContainerAmount = 42,
                            CustomerAmount = 985
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Friday",
                            ContainerAmount = 36,
                            CustomerAmount = 865
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Saturday",
                            ContainerAmount = 43,
                            CustomerAmount = 950
                        },
                        new
                        {
                            Templates_id = 4,
                            Days_name = "Sunday",
                            ContainerAmount = 38,
                            CustomerAmount = 950
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Monday",
                            ContainerAmount = 52,
                            CustomerAmount = 832
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Tuesday",
                            ContainerAmount = 49,
                            CustomerAmount = 935
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Wednesday",
                            ContainerAmount = 29,
                            CustomerAmount = 877
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Thursday",
                            ContainerAmount = 41,
                            CustomerAmount = 989
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Friday",
                            ContainerAmount = 32,
                            CustomerAmount = 872
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Saturday",
                            ContainerAmount = 36,
                            CustomerAmount = 771
                        },
                        new
                        {
                            Templates_id = 5,
                            Days_name = "Sunday",
                            ContainerAmount = 52,
                            CustomerAmount = 885
                        });
                });

            modelBuilder.Entity("Branch", b =>
                {
                    b.HasOne("bumbo.Models.Country", "Country")
                        .WithMany("Branches")
                        .HasForeignKey("CountryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Prognosis", null)
                        .WithMany("Branches")
                        .HasForeignKey("PrognosisId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataLayer.Models.Prognosis_has_days_has_Department", b =>
                {
                    b.HasOne("bumbo.Models.Days", "Days")
                        .WithMany()
                        .HasForeignKey("Days_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Department", "Department")
                        .WithMany("Prognosis")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Prognosis", "Prognosis")
                        .WithMany()
                        .HasForeignKey("PrognosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Days");

                    b.Navigation("Department");

                    b.Navigation("Prognosis");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.HasOne("Branch", "ManagerOfBranch")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerOfBranchId");

                    b.Navigation("ManagerOfBranch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bumbo.Models.BranchHasEmployee", b =>
                {
                    b.HasOne("Branch", "Branch")
                        .WithMany("BranchHasEmployees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee", "Employee")
                        .WithMany("BranchEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionName");

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("bumbo.Models.Prognosis", b =>
                {
                    b.HasOne("Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("bumbo.Models.Prognosis_has_days", b =>
                {
                    b.HasOne("bumbo.Models.Days", "Days")
                        .WithMany("Prognosis_Has_Days")
                        .HasForeignKey("Days_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Prognosis", "Prognosis")
                        .WithMany("Prognosis_Has_Days")
                        .HasForeignKey("PrognosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Days");

                    b.Navigation("Prognosis");
                });

            modelBuilder.Entity("bumbo.Models.Template", b =>
                {
                    b.HasOne("Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("Branch_branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("bumbo.Models.TemplateHasDays", b =>
                {
                    b.HasOne("bumbo.Models.Days", "Days")
                        .WithMany("TemplateHasDays")
                        .HasForeignKey("Days_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Template", "Template")
                        .WithMany("TemplateHasDays")
                        .HasForeignKey("Templates_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Days");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Branch", b =>
                {
                    b.Navigation("BranchHasEmployees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataLayer.Models.Department", b =>
                {
                    b.Navigation("Prognosis");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Navigation("BranchEmployees");
                });

            modelBuilder.Entity("bumbo.Models.Country", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("bumbo.Models.Days", b =>
                {
                    b.Navigation("Prognosis_Has_Days");

                    b.Navigation("TemplateHasDays");
                });

            modelBuilder.Entity("bumbo.Models.Prognosis", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Prognosis_Has_Days");
                });

            modelBuilder.Entity("bumbo.Models.Template", b =>
                {
                    b.Navigation("TemplateHasDays");
                });
#pragma warning restore 612, 618
        }
    }
}
