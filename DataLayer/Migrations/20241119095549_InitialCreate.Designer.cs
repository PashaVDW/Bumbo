// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bumbo.Data;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(BumboDBContext))]
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
    [Migration("20241120223511_init")]
    partial class init
========
    [Migration("20241119095549_InitialCreate")]
    partial class InitialCreate
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<TimeOnly>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeOnly>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrognosisId")
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("ShelfMeeters")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BranchId");

                    b.HasIndex("CountryName");

                    b.HasIndex("PrognosisId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            ClosingTime = new TimeOnly(18, 0, 0),
                            CountryName = "Netherlands",
                            HouseNumber = "10",
                            Name = "Amsterdam Filiaal",
                            OpeningTime = new TimeOnly(9, 0, 0),
                            PostalCode = "1012 LG",
                            ShelfMeeters = 0,
                            Street = "Damrak"
                        },
                        new
                        {
                            BranchId = 2,
                            ClosingTime = new TimeOnly(17, 0, 0),
                            CountryName = "Belgium",
                            HouseNumber = "20",
                            Name = "Brussels Filiaal",
                            OpeningTime = new TimeOnly(8, 0, 0),
                            PostalCode = "1000",
                            ShelfMeeters = 0,
                            Street = "Grote Markt"
                        },
                        new
                        {
                            BranchId = 3,
                            ClosingTime = new TimeOnly(21, 0, 0),
                            CountryName = "Netherlands",
                            HouseNumber = "2",
                            Name = "Alkmaar Filiaal",
                            OpeningTime = new TimeOnly(9, 0, 0),
                            PostalCode = "1811 KH",
                            ShelfMeeters = 0,
                            Street = "Paardenmarkt"
                        },
                        new
                        {
                            BranchId = 4,
                            ClosingTime = new TimeOnly(17, 0, 0),
                            CountryName = "Netherlands",
                            HouseNumber = "15",
                            Name = "Rotterdam Filiaal",
                            OpeningTime = new TimeOnly(9, 0, 0),
                            PostalCode = "3011 HE",
                            ShelfMeeters = 0,
                            Street = "Botersloot"
                        });
                });

<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
            modelBuilder.Entity("DataLayer.Models.Availability", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Date", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Availability");
                });

========
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
            modelBuilder.Entity("DataLayer.Models.Department", b =>
                {
                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentName");

                    b.ToTable("Department");
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                });

            modelBuilder.Entity("DataLayer.Models.EmployeeHasDepartment", b =>
                {
                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DepartmentName", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeHasDepartment");
========

                    b.HasData(
                        new
                        {
                            DepartmentName = "Coli uitladen"
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen"
                        },
                        new
                        {
                            DepartmentName = "Kassa"
                        },
                        new
                        {
                            DepartmentName = "Vers"
                        },
                        new
                        {
                            DepartmentName = "Spiegelen "
                        });
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                });

            modelBuilder.Entity("DataLayer.Models.Function", b =>
                {
                    b.Property<string>("FunctionName")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("FunctionName");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            FunctionName = "Cashier"
                        },
                        new
                        {
                            FunctionName = "Stocker"
                        },
                        new
                        {
                            FunctionName = "Manager"
                        });
                });

<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
            modelBuilder.Entity("DataLayer.Models.LabourRules", b =>
                {
                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgeGroup")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<TimeOnly>("MaxEndTime")
                        .HasColumnType("time");

                    b.Property<int>("MaxHoursPerDay")
                        .HasColumnType("int");

                    b.Property<int>("MaxHoursPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("MaxHoursWithSchool")
                        .HasColumnType("int");

                    b.Property<int>("MaxOvertimeHoursPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("MaxShiftDuration")
                        .HasColumnType("int");

                    b.Property<int>("MaxWorkDaysPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("MinRestDaysPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("MinRestHoursBetweenShifts")
                        .HasColumnType("int");

                    b.Property<int>("MinutesOfBreak")
                        .HasColumnType("int");

                    b.Property<int>("NumHoursWorkedBeforeBreak")
                        .HasColumnType("int");

                    b.Property<decimal>("OvertimePayPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SickPayPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CountryName");

                    b.ToTable("LabourRules");
                });

            modelBuilder.Entity("DataLayer.Models.PrognosisHasDaysHasDepartment", b =>
========
            modelBuilder.Entity("DataLayer.Models.Prognosis_has_days_has_Department", b =>
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                {
                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                    b.Property<string>("DayName")
========
                    b.Property<string>("Days_name")
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PrognosisId")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                    b.Property<int>("AmountOfWorkersNeeded")
                        .HasColumnType("int");

                    b.Property<int>("HoursOfWorkNeeded")
                        .HasColumnType("int");

                    b.HasKey("DepartmentName", "DayName", "PrognosisId");

                    b.HasIndex("DayName", "PrognosisId");

                    b.ToTable("PrognosisHasDaysHasDepartment");
                });

            modelBuilder.Entity("DataLayer.Models.Schedule", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsSick")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "BranchId", "Date");

                    b.HasIndex("BranchId");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("TemplateId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("DataLayer.Models.SchoolSchedule", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Date", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SchoolSchedule");
                });

            modelBuilder.Entity("DataLayer.Models.SwitchRequest", b =>
                {
                    b.Property<string>("SendToEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("Declined")
                        .HasColumnType("bit");

                    b.HasKey("SendToEmployeeId", "EmployeeId", "BranchId", "Date");

                    b.HasIndex("EmployeeId", "BranchId", "Date");

                    b.ToTable("SwitchRequest");
========
                    b.Property<int>("AmountWorkersNeeded")
                        .HasColumnType("int");

                    b.Property<int>("HoursWorkNeeded")
                        .HasColumnType("int");

                    b.HasKey("DepartmentName", "Days_name", "PrognosisId");

                    b.HasIndex("PrognosisId");

                    b.HasIndex("Days_name", "PrognosisId");

                    b.ToTable("prognosis_Has_Days_Has_Departments");

                    b.HasData(
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 24
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 28
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 32
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 16
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Maandag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 20
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 25
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 30
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 35
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 18
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Dinsdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 22
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 26
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 29
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 34
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 17
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Woensdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 21
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 24
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 27
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 31
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 15
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Donderdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 19
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 28
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 32
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 6,
                            HoursWorkNeeded = 36
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 20
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Vrijdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 24
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 30
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 35
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 6,
                            HoursWorkNeeded = 38
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 22
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Zaterdag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 26
                        },
                        new
                        {
                            DepartmentName = "Coli uitladen",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 27
                        },
                        new
                        {
                            DepartmentName = "Vakkenvullen",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 4,
                            HoursWorkNeeded = 30
                        },
                        new
                        {
                            DepartmentName = "Kassa",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 5,
                            HoursWorkNeeded = 34
                        },
                        new
                        {
                            DepartmentName = "Vers",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 2,
                            HoursWorkNeeded = 18
                        },
                        new
                        {
                            DepartmentName = "Spiegelen",
                            Days_name = "Zondag",
                            PrognosisId = "1",
                            AmountWorkersNeeded = 3,
                            HoursWorkNeeded = 22
                        });
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsSystemManager")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ManagerOfBranchId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerOfBranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f7g7h8i9-01j2-3c45-g6h7-i8j9k0l1m2n3",
                            AccessFailedCount = 0,
                            BID = "B001",
                            BirthDate = new DateTime(1985, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            ConcurrencyStamp = "9e207437-c4c2-4483-9f16-3cae2d4a1d83",
========
                            ConcurrencyStamp = "38906083-0ccd-4578-9db9-ad4e31cbeb40",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            HouseNumber = 10,
                            IsSystemManager = true,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 1,
                            MiddleName = "A.",
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE@EXAMPLE.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEO326U5dBWCFUj9DCCJ+ZZpGO6+Q7mym8l4Jprqu7G+jl9zarBOfaNBOZgxq771XUQ==",
                            PhoneNumber = "06-9876543",
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            SecurityStamp = "9991575d-4a57-441d-afdd-c911e1564ff5",
========
                            PasswordHash = "AQAAAAIAAYagAAAAEPQnfcq3u/HzLpu44UR9lFvaylrd/5K8ACAAnXCMMt3lZj7HvVVAOXDvzlY+0eUfkg==",
                            PhoneNumber = "06-9876543",
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            SecurityStamp = "03bc4421-9d5a-4b1d-b27d-52f65acdea46",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com"
                        },
                        new
                        {
                            Id = "e6f6g7h8-90i1-2b34-f5g6-h7i8j9k0l1m2",
                            AccessFailedCount = 0,
                            BID = "B002",
                            BirthDate = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            ConcurrencyStamp = "d2bc2479-3a37-4ea9-99ae-992a75ad9139",
========
                            ConcurrencyStamp = "7f84b677-6f75-45d7-a52c-ef4bad434a30",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            HouseNumber = 22,
                            IsSystemManager = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MiddleName = "B.",
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE.SMITH@EXAMPLE.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEPIChTy2DQ6jlZAyZxKpLW5XWRr1WLTU2kDnxFQnp2x63w9/vs+quKrjlPuj6Kibvw==",
                            PhoneNumber = "06-12345678",
                            PhoneNumberConfirmed = false,
                            PostalCode = "9271 GB",
                            SecurityStamp = "eb589589-d568-4a22-a4c6-a2bb2690e170",
========
                            PasswordHash = "AQAAAAIAAYagAAAAEGlQQXMjs0cU4TTEe9xCxHKi4CLQjr+HVzvW6KRxzv5+gaJLD5JiGjGvEEW/nUiLkw==",
                            PhoneNumber = "06-12345678",
                            PhoneNumberConfirmed = false,
                            PostalCode = "9271 GB",
                            SecurityStamp = "a2619873-eaad-4714-9adb-62b5b2ca0ba1",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            StartDate = new DateTime(2012, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "jane.smith@example.com"
                        },
                        new
                        {
                            Id = "a2b2d3e4-56f7-8a90-b1c2-d3e4f5g6h7i8",
                            AccessFailedCount = 0,
                            BID = "B003",
                            BirthDate = new DateTime(1992, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            ConcurrencyStamp = "c51b9aee-46f1-454a-b72e-f41c22a5d004",
========
                            ConcurrencyStamp = "4cfbfdb5-43b1-4213-b3b7-b3ef10b5757e",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            Email = "darlon.vandijk@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Darlon",
                            HouseNumber = 5,
                            IsSystemManager = false,
                            LastName = "van Dijk",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "DARLON.VANDIJK@HOTMAIL.COM",
                            NormalizedUserName = "DARLON.VANDIJK@HOTMAIL.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEOiYA+tuLfCZqFpAOsqguOQhGCH4XG+mXQb4Hl6ruo28MDsHO6zJswsRGaWoBjfbAA==",
                            PhoneNumber = "+31 6 34567890",
                            PhoneNumberConfirmed = false,
                            PostalCode = "8329 SK",
                            SecurityStamp = "7df20752-dac6-4ada-8722-38557a121a65",
========
                            PasswordHash = "AQAAAAIAAYagAAAAEIoYKOu/bSQcWTVgQoOF+MROTTisAHIyEYiKqZ8EbEGyVBvbhs0zatasQrGQg1wC5g==",
                            PhoneNumber = "+31 6 34567890",
                            PhoneNumberConfirmed = false,
                            PostalCode = "8329 SK",
                            SecurityStamp = "50787630-a8cf-4b46-a8f0-dd53bdaeae41",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            StartDate = new DateTime(2018, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "darlon.vandijk@hotmail.com"
                        },
                        new
                        {
                            Id = "b3c3d4e5-67f8-9a01-c2d3-e4f5g6h7i8j9",
                            AccessFailedCount = 0,
                            BID = "B004",
                            BirthDate = new DateTime(1980, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            ConcurrencyStamp = "08d103e7-ecd4-420c-b9b3-274ca0af77ff",
========
                            ConcurrencyStamp = "29c3aa10-c066-4595-991e-61c2ce20a814",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            Email = "pasha.bakker@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pasha",
                            HouseNumber = 15,
                            IsSystemManager = false,
                            LastName = "Bakker",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 3,
                            MiddleName = "",
                            NormalizedEmail = "PASHA.BAKKER@GMAIL.COM",
                            NormalizedUserName = "PASHA.BAKKER@GMAIL.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEBTOmrEqP1+qXKqmnwrWa66a6qX7wdTR8YloKKtpwvG1f2Pp1vDmiO2i9D0E8VQuhw==",
                            PhoneNumber = "+31 6 45678901",
                            PhoneNumberConfirmed = false,
                            PostalCode = "3894 HT",
                            SecurityStamp = "700b1695-e07d-4adc-a0fb-5e95b088d386",
========
                            PasswordHash = "AQAAAAIAAYagAAAAEAA1Q3CHcOk2tGmoHvbpTRcEPvXos6WMkRieyJp7MNaAwVfx8vBCcfMkeu5MbthN/A==",
                            PhoneNumber = "+31 6 45678901",
                            PhoneNumberConfirmed = false,
                            PostalCode = "3894 HT",
                            SecurityStamp = "f7494b17-9c01-4806-a9a5-a6706b03777f",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            StartDate = new DateTime(2010, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "pasha.bakker@gmail.com"
                        },
                        new
                        {
                            Id = "c4d4e5f6-78g9-0a12-d3e4-f5g6h7i8j9k0",
                            AccessFailedCount = 0,
                            BID = "B005",
                            BirthDate = new DateTime(1988, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            ConcurrencyStamp = "7a721771-c4dc-430e-b745-65654a7e0e0e",
========
                            ConcurrencyStamp = "949cc05e-d77c-41d2-b19a-8a51122c9e59",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            Email = "sarah.vanderven@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sarah",
                            HouseNumber = 8,
                            IsSystemManager = false,
                            LastName = "van der Ven",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "SARAH.VANDERVEN@HOTMAIL.COM",
                            NormalizedUserName = "SARAH.VANDERVEN@HOTMAIL.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEKQGEJkVhX0gaZUTsxUd9ms1o5UeLrAMeXg7xNR7lCjuzl6l9md+QWSuYQFzN2SO6w==",
                            PhoneNumber = "+31 6 56789012",
                            PhoneNumberConfirmed = false,
                            PostalCode = "2933 KJ",
                            SecurityStamp = "f0c3935c-93dc-4113-b8c7-839cc1d4fd56",
========
                            PasswordHash = "AQAAAAIAAYagAAAAEASaO1kixiV4NKXzZzcqBSeEc1PQzubZoW2zCVZ8w8iP5F6yyWoFZk7KRBohJ14E6Q==",
                            PhoneNumber = "+31 6 56789012",
                            PhoneNumberConfirmed = false,
                            PostalCode = "2933 KJ",
                            SecurityStamp = "814f1d95-6e4b-4a3c-852b-4b0b5af2b441",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            StartDate = new DateTime(2017, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "sarah.vanderven@hotmail.com"
                        },
                        new
                        {
                            Id = "d5e5f6g7-89h0-1a23-e4f5-g6h7i8j9k0l1",
                            AccessFailedCount = 0,
                            BID = "B006",
                            BirthDate = new DateTime(1995, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            ConcurrencyStamp = "0169ea7b-33ff-4d7e-91b1-904b41be6587",
========
                            ConcurrencyStamp = "1fdc9b0e-31bb-4669-83ea-e80523a779bc",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            Email = "david.denboer@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "David",
                            HouseNumber = 30,
                            IsSystemManager = false,
                            LastName = "den Boer",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 2,
                            MiddleName = "",
                            NormalizedEmail = "DAVID.DENBOER@GMAIL.COM",
                            NormalizedUserName = "DAVID.DENBOER@GMAIL.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEET65V3GTH3+/PROHPFcBXlaXjzzd8juYenmaxNM1rcMwj52QsK4ELmGaePquu/oow==",
                            PhoneNumber = "+31 6 67890123",
                            PhoneNumberConfirmed = false,
                            PostalCode = "4293 BF",
                            SecurityStamp = "5db2a108-f7d5-4d7f-b177-0cc11acee81f",
========
                            PasswordHash = "AQAAAAIAAYagAAAAEPwRNEV+f6XutvPPl3uMTXqP/9iSjQ2PLhBOZ2RDDkyaaR912WvCE8XJGCaYe6nCeA==",
                            PhoneNumber = "+31 6 67890123",
                            PhoneNumberConfirmed = false,
                            PostalCode = "4293 BF",
                            SecurityStamp = "a74b0c23-b775-472a-8e7e-73e0bbcc63ca",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            StartDate = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "david.denboer@gmail.com"
                        },
                        new
                        {
                            Id = "a1b1c1d1-1111-2222-3333-4444abcdabcd",
                            AccessFailedCount = 0,
                            BID = "B012",
                            BirthDate = new DateTime(1993, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            ConcurrencyStamp = "88bdac6a-b78c-4521-bca1-76681503ad03",
========
                            ConcurrencyStamp = "f4774fee-4ff8-467f-8881-52f0d6743ac3",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            Email = "anthony.ross@example.com",
                            EmailConfirmed = true,
                            FirstName = "Anthony",
                            HouseNumber = 7,
                            IsSystemManager = false,
                            LastName = "Ross",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 1,
                            MiddleName = "",
                            NormalizedEmail = "ANTHONY.ROSS@EXAMPLE.COM",
                            NormalizedUserName = "ANTHONY.ROSS@EXAMPLE.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEHvJLs5wA6I9AkbBAYVHRhangcnU5UnDtux+RO0KzjW3J37wtaa/sbwiLB/pCqAJGQ==",
                            PhoneNumber = "+31 6 12345678",
                            PhoneNumberConfirmed = false,
                            PostalCode = "2234 AB",
                            SecurityStamp = "8ef2f9d3-175d-4e22-867f-3df5c5e0ee72",
                            StartDate = new DateTime(2024, 11, 20, 23, 35, 10, 584, DateTimeKind.Local).AddTicks(8173),
========
                            PasswordHash = "AQAAAAIAAYagAAAAEJD4yue0xG8XkRqHXTE+9qX1o5TAKPqSnCLOf3nHDMfid5NkcpkxnFskoWNfcB/hGw==",
                            PhoneNumber = "+31 6 12345678",
                            PhoneNumberConfirmed = false,
                            PostalCode = "2234 AB",
                            SecurityStamp = "f3d5f9b1-e8a4-442b-a6dc-a05740492e80",
                            StartDate = new DateTime(2024, 11, 19, 10, 55, 48, 208, DateTimeKind.Local).AddTicks(7525),
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "anthony.ross@example.com"
                        },
                        new
                        {
                            Id = "b2c2d2e2-2222-3333-4444-5555abcdefab",
                            AccessFailedCount = 0,
                            BID = "B013",
                            BirthDate = new DateTime(1987, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            ConcurrencyStamp = "b2a5b401-fc8e-4e5f-8368-44356214fcf0",
========
                            ConcurrencyStamp = "cfcec7d2-b5cb-467a-8fdb-fcf9239cbecb",
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            Email = "douwe.jansen@example.com",
                            EmailConfirmed = true,
                            FirstName = "Douwe",
                            HouseNumber = 12,
                            IsSystemManager = false,
                            LastName = "Jansen",
                            LockoutEnabled = false,
                            ManagerOfBranchId = 2,
                            MiddleName = "",
                            NormalizedEmail = "DOUWE.JANSEN@EXAMPLE.COM",
                            NormalizedUserName = "DOUWE.JANSEN@EXAMPLE.COM",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAECfpdU5vbELu4WJ58f5eSWUxux01rRF5zwm+HTUx1x3+pYBlt1r5GFN2ZUqfuudfqg==",
                            PhoneNumber = "+31 6 87654321",
                            PhoneNumberConfirmed = false,
                            PostalCode = "3345 CD",
                            SecurityStamp = "5c1c9744-b55b-4d9c-8c3b-8d6de20f3eb6",
                            StartDate = new DateTime(2024, 11, 20, 23, 35, 10, 650, DateTimeKind.Local).AddTicks(2086),
========
                            PasswordHash = "AQAAAAIAAYagAAAAEIWssG9790NOuFWOwTySIZivgBIt2Muw8fJ6VY0MLLsNclM7J//GwUeNiyMgB2uPnQ==",
                            PhoneNumber = "+31 6 87654321",
                            PhoneNumberConfirmed = false,
                            PostalCode = "3345 CD",
                            SecurityStamp = "947ea6ed-dde2-4009-99f2-4df9c2fe599a",
                            StartDate = new DateTime(2024, 11, 19, 10, 55, 48, 302, DateTimeKind.Local).AddTicks(4102),
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "douwe.jansen@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RequestStatus", b =>
                {
                    b.Property<string>("RequestStatusName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RequestStatusName");

                    b.ToTable("RequestStatus");
                });

            modelBuilder.Entity("bumbo.Models.BranchHasEmployee", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FunctionName")
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BranchId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FunctionName");

                    b.ToTable("BranchHasEmployees");

                    b.HasData(
                        new
                        {
                            BranchId = 2,
                            EmployeeId = "d5e5f6g7-89h0-1a23-e4f5-g6h7i8j9k0l1",
                            FunctionName = "Manager",
                            StartDate = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BranchId = 3,
                            EmployeeId = "b3c3d4e5-67f8-9a01-c2d3-e4f5g6h7i8j9",
                            FunctionName = "Manager",
                            StartDate = new DateTime(2010, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BranchId = 4,
                            EmployeeId = "a2b2d3e4-56f7-8a90-b1c2-d3e4f5g6h7i8",
                            FunctionName = "Stocker",
                            StartDate = new DateTime(2018, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BranchId = 3,
                            EmployeeId = "c4d4e5f6-78g9-0a12-d3e4-f5g6h7i8j9k0",
                            FunctionName = "Cashier",
                            StartDate = new DateTime(2017, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BranchId = 1,
                            EmployeeId = "a1b1c1d1-1111-2222-3333-4444abcdabcd",
                            FunctionName = "Cashier",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            StartDate = new DateTime(2024, 11, 20, 23, 35, 10, 584, DateTimeKind.Local).AddTicks(8173)
========
                            StartDate = new DateTime(2024, 11, 19, 10, 55, 48, 208, DateTimeKind.Local).AddTicks(7525)
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                        },
                        new
                        {
                            BranchId = 2,
                            EmployeeId = "b2c2d2e2-2222-3333-4444-5555abcdefab",
                            FunctionName = "Stocker",
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                            StartDate = new DateTime(2024, 11, 20, 23, 35, 10, 650, DateTimeKind.Local).AddTicks(2086)
========
                            StartDate = new DateTime(2024, 11, 19, 10, 55, 48, 302, DateTimeKind.Local).AddTicks(4102)
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                        });
                });

            modelBuilder.Entity("bumbo.Models.BranchRequestsEmployee", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RequestToBranchId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("RequestStatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BranchId", "EmployeeId", "RequestToBranchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RequestStatusName");

                    b.HasIndex("RequestToBranchId");

                    b.ToTable("BranchRequestsEmployee");
                });

            modelBuilder.Entity("bumbo.Models.Country", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Name");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Name = "Netherlands"
                        },
                        new
                        {
                            Name = "Belgium"
                        },
                        new
                        {
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("bumbo.Models.Days", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Name");

                    b.ToTable("Days");

                    b.HasData(
                        new
                        {
                            Name = "Maandag"
                        },
                        new
                        {
                            Name = "Dinsdag"
                        },
                        new
                        {
                            Name = "Woensdag"
                        },
                        new
                        {
                            Name = "Donderdag"
                        },
                        new
                        {
                            Name = "Vrijdag"
                        },
                        new
                        {
                            Name = "Zaterdag"
                        },
                        new
                        {
                            Name = "Zondag"
                        },
                        new
                        {
                            Name = "Monday"
                        },
                        new
                        {
                            Name = "Tuesday"
                        },
                        new
                        {
                            Name = "Wednesday"
                        },
                        new
                        {
                            Name = "Thursday"
                        },
                        new
                        {
                            Name = "Friday"
                        },
                        new
                        {
                            Name = "Saturday"
                        },
                        new
                        {
                            Name = "Sunday"
                        });
                });

            modelBuilder.Entity("bumbo.Models.Norm", b =>
                {
                    b.Property<int>("normId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("normId"));

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("branchId")
                        .HasColumnType("int");

                    b.Property<int>("normInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("week")
                        .HasColumnType("int");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("normId");

                    b.HasIndex("branchId", "year", "week", "activity")
                        .IsUnique();

                    b.ToTable("Norms");

                    b.HasData(
                        new
                        {
                            normId = 1,
                            activity = "Coli uitladen",
                            branchId = 1,
                            normInSeconds = 90,
                            week = 41,
                            year = 2024
                        },
                        new
                        {
                            normId = 2,
                            activity = "Vakkenvullen",
                            branchId = 1,
                            normInSeconds = 33,
                            week = 41,
                            year = 2024
                        },
                        new
                        {
                            normId = 3,
                            activity = "Kassa",
                            branchId = 1,
                            normInSeconds = 3,
                            week = 41,
                            year = 2024
                        },
                        new
                        {
                            normId = 4,
                            activity = "Vers",
                            branchId = 1,
                            normInSeconds = 7,
                            week = 41,
                            year = 2024
                        },
                        new
                        {
                            normId = 5,
                            activity = "Spiegelen",
                            branchId = 1,
                            normInSeconds = 2,
                            week = 41,
                            year = 2024
                        });
                });

            modelBuilder.Entity("bumbo.Models.Prognosis", b =>
                {
                    b.Property<string>("PrognosisId")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("WeekNr")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("PrognosisId");

                    b.HasIndex("BranchId");

                    b.ToTable("Prognoses");

                    b.HasData(
                        new
                        {
                            PrognosisId = "1",
                            BranchId = 1,
                            WeekNr = 40,
                            Year = 2024
                        },
                        new
                        {
                            PrognosisId = "2",
                            BranchId = 1,
                            WeekNr = 20,
                            Year = 2024
                        });
                });

            modelBuilder.Entity("bumbo.Models.PrognosisHasDays", b =>
                {
                    b.Property<string>("DayName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PrognosisId")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("CustomerAmount")
                        .HasColumnType("int");

                    b.Property<int>("PackagesAmount")
                        .HasColumnType("int");

                    b.HasKey("DayName", "PrognosisId");

                    b.HasIndex("PrognosisId");

                    b.ToTable("PrognosisHasDays");

                    b.HasData(
                        new
                        {
                            DayName = "Maandag",
                            PrognosisId = "1",
                            CustomerAmount = 100,
                            PackagesAmount = 50
                        },
                        new
                        {
                            DayName = "Dinsdag",
                            PrognosisId = "1",
                            CustomerAmount = 120,
                            PackagesAmount = 60
                        },
                        new
                        {
                            DayName = "Woensdag",
                            PrognosisId = "1",
                            CustomerAmount = 130,
                            PackagesAmount = 55
                        },
                        new
                        {
                            DayName = "Donderdag",
                            PrognosisId = "1",
                            CustomerAmount = 110,
                            PackagesAmount = 45
                        },
                        new
                        {
                            DayName = "Vrijdag",
                            PrognosisId = "1",
                            CustomerAmount = 150,
                            PackagesAmount = 70
                        },
                        new
                        {
                            DayName = "Zaterdag",
                            PrognosisId = "1",
                            CustomerAmount = 160,
                            PackagesAmount = 80
                        },
                        new
                        {
                            DayName = "Zondag",
                            PrognosisId = "1",
                            CustomerAmount = 140,
                            PackagesAmount = 65
                        },
                        new
                        {
                            DayName = "Maandag",
                            PrognosisId = "2",
                            CustomerAmount = 90,
                            PackagesAmount = 40
                        },
                        new
                        {
                            DayName = "Dinsdag",
                            PrognosisId = "2",
                            CustomerAmount = 115,
                            PackagesAmount = 55
                        },
                        new
                        {
                            DayName = "Woensdag",
                            PrognosisId = "2",
                            CustomerAmount = 125,
                            PackagesAmount = 50
                        },
                        new
                        {
                            DayName = "Donderdag",
                            PrognosisId = "2",
                            CustomerAmount = 105,
                            PackagesAmount = 42
                        },
                        new
                        {
                            DayName = "Vrijdag",
                            PrognosisId = "2",
                            CustomerAmount = 140,
                            PackagesAmount = 68
                        },
                        new
                        {
                            DayName = "Zaterdag",
                            PrognosisId = "2",
                            CustomerAmount = 150,
                            PackagesAmount = 75
                        },
                        new
                        {
                            DayName = "Zondag",
                            PrognosisId = "2",
                            CustomerAmount = 130,
                            PackagesAmount = 60
                        });
                });

            modelBuilder.Entity("bumbo.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchBranchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("BranchBranchId");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchBranchId = 1,
                            Name = "Basic Package"
                        },
                        new
                        {
                            Id = 2,
                            BranchBranchId = 1,
                            Name = "Standard Package"
                        },
                        new
                        {
                            Id = 3,
                            BranchBranchId = 2,
                            Name = "Premium Package"
                        },
                        new
                        {
                            Id = 4,
                            BranchBranchId = 2,
                            Name = "Family Package"
                        },
                        new
                        {
                            Id = 5,
                            BranchBranchId = 1,
                            Name = "Weekly Special"
                        });
                });

            modelBuilder.Entity("bumbo.Models.TemplateHasDays", b =>
                {
                    b.Property<int>("TemplatesId")
                        .HasColumnType("int");

                    b.Property<string>("DaysName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ContainerAmount")
                        .HasColumnType("int");

                    b.Property<int>("CustomerAmount")
                        .HasColumnType("int");

                    b.HasKey("TemplatesId", "DaysName");

                    b.HasIndex("DaysName");

                    b.ToTable("TemplateHasDays");

                    b.HasData(
                        new
                        {
                            TemplatesId = 1,
                            DaysName = "Monday",
                            ContainerAmount = 41,
                            CustomerAmount = 989
                        },
                        new
                        {
                            TemplatesId = 1,
                            DaysName = "Tuesday",
                            ContainerAmount = 52,
                            CustomerAmount = 825
                        },
                        new
                        {
                            TemplatesId = 1,
                            DaysName = "Wednesday",
                            ContainerAmount = 38,
                            CustomerAmount = 902
                        },
                        new
                        {
                            TemplatesId = 1,
                            DaysName = "Thursday",
                            ContainerAmount = 52,
                            CustomerAmount = 990
                        },
                        new
                        {
                            TemplatesId = 1,
                            DaysName = "Friday",
                            ContainerAmount = 39,
                            CustomerAmount = 1040
                        },
                        new
                        {
                            TemplatesId = 1,
                            DaysName = "Saturday",
                            ContainerAmount = 43,
                            CustomerAmount = 953
                        },
                        new
                        {
                            TemplatesId = 1,
                            DaysName = "Sunday",
                            ContainerAmount = 32,
                            CustomerAmount = 872
                        },
                        new
                        {
                            TemplatesId = 2,
                            DaysName = "Monday",
                            ContainerAmount = 42,
                            CustomerAmount = 916
                        },
                        new
                        {
                            TemplatesId = 2,
                            DaysName = "Tuesday",
                            ContainerAmount = 38,
                            CustomerAmount = 912
                        },
                        new
                        {
                            TemplatesId = 2,
                            DaysName = "Wednesday",
                            ContainerAmount = 32,
                            CustomerAmount = 902
                        },
                        new
                        {
                            TemplatesId = 2,
                            DaysName = "Thursday",
                            ContainerAmount = 45,
                            CustomerAmount = 940
                        },
                        new
                        {
                            TemplatesId = 2,
                            DaysName = "Friday",
                            ContainerAmount = 47,
                            CustomerAmount = 816
                        },
                        new
                        {
                            TemplatesId = 2,
                            DaysName = "Saturday",
                            ContainerAmount = 38,
                            CustomerAmount = 842
                        },
                        new
                        {
                            TemplatesId = 2,
                            DaysName = "Sunday",
                            ContainerAmount = 45,
                            CustomerAmount = 885
                        },
                        new
                        {
                            TemplatesId = 3,
                            DaysName = "Monday",
                            ContainerAmount = 53,
                            CustomerAmount = 872
                        },
                        new
                        {
                            TemplatesId = 3,
                            DaysName = "Tuesday",
                            ContainerAmount = 41,
                            CustomerAmount = 989
                        },
                        new
                        {
                            TemplatesId = 3,
                            DaysName = "Wednesday",
                            ContainerAmount = 42,
                            CustomerAmount = 916
                        },
                        new
                        {
                            TemplatesId = 3,
                            DaysName = "Thursday",
                            ContainerAmount = 36,
                            CustomerAmount = 875
                        },
                        new
                        {
                            TemplatesId = 3,
                            DaysName = "Friday",
                            ContainerAmount = 29,
                            CustomerAmount = 877
                        },
                        new
                        {
                            TemplatesId = 3,
                            DaysName = "Saturday",
                            ContainerAmount = 53,
                            CustomerAmount = 945
                        },
                        new
                        {
                            TemplatesId = 3,
                            DaysName = "Sunday",
                            ContainerAmount = 52,
                            CustomerAmount = 880
                        },
                        new
                        {
                            TemplatesId = 4,
                            DaysName = "Monday",
                            ContainerAmount = 49,
                            CustomerAmount = 900
                        },
                        new
                        {
                            TemplatesId = 4,
                            DaysName = "Tuesday",
                            ContainerAmount = 38,
                            CustomerAmount = 903
                        },
                        new
                        {
                            TemplatesId = 4,
                            DaysName = "Wednesday",
                            ContainerAmount = 45,
                            CustomerAmount = 930
                        },
                        new
                        {
                            TemplatesId = 4,
                            DaysName = "Thursday",
                            ContainerAmount = 42,
                            CustomerAmount = 985
                        },
                        new
                        {
                            TemplatesId = 4,
                            DaysName = "Friday",
                            ContainerAmount = 36,
                            CustomerAmount = 865
                        },
                        new
                        {
                            TemplatesId = 4,
                            DaysName = "Saturday",
                            ContainerAmount = 43,
                            CustomerAmount = 950
                        },
                        new
                        {
                            TemplatesId = 4,
                            DaysName = "Sunday",
                            ContainerAmount = 38,
                            CustomerAmount = 950
                        },
                        new
                        {
                            TemplatesId = 5,
                            DaysName = "Monday",
                            ContainerAmount = 52,
                            CustomerAmount = 832
                        },
                        new
                        {
                            TemplatesId = 5,
                            DaysName = "Tuesday",
                            ContainerAmount = 49,
                            CustomerAmount = 935
                        },
                        new
                        {
                            TemplatesId = 5,
                            DaysName = "Wednesday",
                            ContainerAmount = 29,
                            CustomerAmount = 877
                        },
                        new
                        {
                            TemplatesId = 5,
                            DaysName = "Thursday",
                            ContainerAmount = 41,
                            CustomerAmount = 989
                        },
                        new
                        {
                            TemplatesId = 5,
                            DaysName = "Friday",
                            ContainerAmount = 32,
                            CustomerAmount = 872
                        },
                        new
                        {
                            TemplatesId = 5,
                            DaysName = "Saturday",
                            ContainerAmount = 36,
                            CustomerAmount = 771
                        },
                        new
                        {
                            TemplatesId = 5,
                            DaysName = "Sunday",
                            ContainerAmount = 52,
                            CustomerAmount = 885
                        });
                });

            modelBuilder.Entity("Branch", b =>
                {
                    b.HasOne("bumbo.Models.Country", "Country")
                        .WithMany("Branches")
                        .HasForeignKey("CountryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Prognosis", null)
                        .WithMany("Branches")
                        .HasForeignKey("PrognosisId");

                    b.Navigation("Country");
                });

<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
            modelBuilder.Entity("DataLayer.Models.Availability", b =>
                {
                    b.HasOne("Employee", "Employee")
                        .WithMany("Availabilitys")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DataLayer.Models.EmployeeHasDepartment", b =>
                {
                    b.HasOne("DataLayer.Models.Department", "Department")
                        .WithMany("EmployeeHasDepartment")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee", "Employee")
                        .WithMany("EmployeeHasDepartment")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DataLayer.Models.LabourRules", b =>
                {
                    b.HasOne("bumbo.Models.Country", "Country")
                        .WithMany("LabourRules")
                        .HasForeignKey("CountryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataLayer.Models.PrognosisHasDaysHasDepartment", b =>
                {
                    b.HasOne("DataLayer.Models.Department", "Department")
                        .WithMany("PrognosisHasDaysHasDepartment")
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.PrognosisHasDays", "PrognosisHasDays")
                        .WithMany("PrognosisHasDaysHasDepartment")
                        .HasForeignKey("DayName", "PrognosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("PrognosisHasDays");
                });

            modelBuilder.Entity("DataLayer.Models.Schedule", b =>
                {
                    b.HasOne("Branch", "Branch")
                        .WithMany("Schedules")
                        .HasForeignKey("BranchId")
========
            modelBuilder.Entity("DataLayer.Models.Prognosis_has_days_has_Department", b =>
                {
                    b.HasOne("bumbo.Models.Days", "Days")
                        .WithMany()
                        .HasForeignKey("Days_name")
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Department", "Department")
<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                        .WithMany("Schedules")
========
                        .WithMany("Prognosis")
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                        .HasForeignKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

<<<<<<<< HEAD:DataLayer/Migrations/20241120223511_init.Designer.cs
                    b.HasOne("Employee", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Template", null)
                        .WithMany("Schedules")
                        .HasForeignKey("TemplateId");

                    b.Navigation("Branch");

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DataLayer.Models.SchoolSchedule", b =>
                {
                    b.HasOne("Employee", "Employee")
                        .WithMany("SchoolSchedules")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DataLayer.Models.SwitchRequest", b =>
                {
                    b.HasOne("Employee", "Employee")
                        .WithMany("SwitchRequests")
                        .HasForeignKey("SendToEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Schedule", "Schedule")
                        .WithMany("SwitchRequests")
                        .HasForeignKey("EmployeeId", "BranchId", "Date")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Schedule");
========
                    b.HasOne("bumbo.Models.Prognosis", "Prognosis")
                        .WithMany()
                        .HasForeignKey("PrognosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Prognosis_has_days", "Prognosis_Has_Days")
                        .WithMany("Prognosis_Has_Days_Has_Department")
                        .HasForeignKey("Days_name", "PrognosisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Days");

                    b.Navigation("Department");

                    b.Navigation("Prognosis");

                    b.Navigation("Prognosis_Has_Days");
>>>>>>>> development:DataLayer/Migrations/20241119095549_InitialCreate.Designer.cs
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.HasOne("Branch", "ManagerOfBranch")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerOfBranchId");

                    b.Navigation("ManagerOfBranch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bumbo.Models.BranchHasEmployee", b =>
                {
                    b.HasOne("Branch", "Branch")
                        .WithMany("BranchHasEmployees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee", "Employee")
                        .WithMany("BranchEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionName");

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("bumbo.Models.BranchRequestsEmployee", b =>
                {
                    b.HasOne("Employee", "Employee")
                        .WithMany("BranchRequestsEmployee")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestStatus", "RequestStatus")
                        .WithMany("BranchRequestsEmployee")
                        .HasForeignKey("RequestStatusName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Branch", "Branch")
                        .WithMany("BranchRequestsEmployee")
                        .HasForeignKey("RequestToBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("RequestStatus");
                });

            modelBuilder.Entity("bumbo.Models.Norm", b =>
                {
                    b.HasOne("Branch", "Branch")
                        .WithMany("Norm")
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("bumbo.Models.Prognosis", b =>
                {
                    b.HasOne("Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("bumbo.Models.PrognosisHasDays", b =>
                {
                    b.HasOne("bumbo.Models.Days", "Days")
                        .WithMany("PrognosisHasDays")
                        .HasForeignKey("DayName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Prognosis", "Prognosis")
                        .WithMany("PrognosisHasDays")
                        .HasForeignKey("PrognosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Days");

                    b.Navigation("Prognosis");
                });

            modelBuilder.Entity("bumbo.Models.Template", b =>
                {
                    b.HasOne("Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("bumbo.Models.TemplateHasDays", b =>
                {
                    b.HasOne("bumbo.Models.Days", "Days")
                        .WithMany("TemplateHasDays")
                        .HasForeignKey("DaysName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bumbo.Models.Template", "Template")
                        .WithMany("TemplateHasDays")
                        .HasForeignKey("TemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Days");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Branch", b =>
                {
                    b.Navigation("BranchHasEmployees");

                    b.Navigation("BranchRequestsEmployee");

                    b.Navigation("Employees");

                    b.Navigation("Norm");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DataLayer.Models.Department", b =>
                {
                    b.Navigation("EmployeeHasDepartment");

                    b.Navigation("PrognosisHasDaysHasDepartment");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DataLayer.Models.Schedule", b =>
                {
                    b.Navigation("SwitchRequests");
                });

            modelBuilder.Entity("DataLayer.Models.Department", b =>
                {
                    b.Navigation("Prognosis");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Navigation("Availabilitys");

                    b.Navigation("BranchEmployees");

                    b.Navigation("BranchRequestsEmployee");

                    b.Navigation("EmployeeHasDepartment");

                    b.Navigation("Schedules");

                    b.Navigation("SchoolSchedules");

                    b.Navigation("SwitchRequests");
                });

            modelBuilder.Entity("RequestStatus", b =>
                {
                    b.Navigation("BranchRequestsEmployee");
                });

            modelBuilder.Entity("bumbo.Models.Country", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("LabourRules");
                });

            modelBuilder.Entity("bumbo.Models.Days", b =>
                {
                    b.Navigation("PrognosisHasDays");

                    b.Navigation("TemplateHasDays");
                });

            modelBuilder.Entity("bumbo.Models.Prognosis", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("PrognosisHasDays");
                });

            modelBuilder.Entity("bumbo.Models.PrognosisHasDays", b =>
                {
                    b.Navigation("PrognosisHasDaysHasDepartment");
                });

            modelBuilder.Entity("bumbo.Models.Prognosis_has_days", b =>
                {
                    b.Navigation("Prognosis_Has_Days_Has_Department");
                });

            modelBuilder.Entity("bumbo.Models.Template", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("TemplateHasDays");
                });
#pragma warning restore 612, 618
        }
    }
}
